* Using minikube for testing

Delete previous minikube

#+begin_src shell :results output
  minikube delete
#+end_src

#+RESULTS:
: * Deleting "minikube" from kvm2 ...
: * The "minikube" cluster has been deleted.

Start

#+begin_src shell :results output
  minikube start --kubernetes-version=v1.17.11 --vm-driver=kvm2
#+end_src

#+RESULTS:
: * minikube v1.2.0 on linux (amd64)
: * Creating kvm2 VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...
: * Configuring environment for Kubernetes v1.17.11 on Docker 18.09.6
: * Pulling images ...
: * Launching Kubernetes ...
: * Verifying: apiserver proxy etcd scheduler controller dns
: * Done! kubectl is now configured to use "minikube"

#+begin_src shell :results output
  minikube status
#+end_src

#+RESULTS:
: host: Running
: kubelet: Running
: apiserver: Running
: kubectl: Correctly Configured: pointing to minikube-vm at 192.168.39.127

Get kubernetes context

#+begin_src shell :results output
  kubectl config current-context
#+end_src

#+RESULTS:
: minikube

#+begin_src shell
  kubectl get nodes
#+end_src

#+RESULTS:
| NAME     | STATUS | ROLES  | AGE | VERSION  |
| minikube | Ready  | master | 15h | v1.17.11 |

#+begin_src shell :results output
  kubectl get namespaces -A
#+end_src

#+RESULTS:
: NAME              STATUS   AGE
: default           Active   96s
: kube-node-lease   Active   97s
: kube-public       Active   97s
: kube-system       Active   97s

** Terraform Deployment

Initialize Terraform

#+begin_src shell :results none :dir kubernetes/deployment
  terraform init
#+end_src

Terraform plan

#+begin_src shell :results none :dir kubernetes/deployment
  terraform plan
#+end_src

Terraform apply

#+begin_src shell :results none :dir kubernetes/deployment
  terraform apply -auto-approve
#+end_src

Check that services are available

#+begin_src shell :results output :dir kubernetes/deployment
  kubectl get services -n dev
#+end_src

#+RESULTS:
: NAME                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                        AGE
: qhub-conda-store               ClusterIP   10.108.148.195   <none>        2049/TCP,20048/TCP,111/TCP                     2m7s
: qhub-jupyterhub-hub            ClusterIP   10.101.222.197   <none>        8081/TCP                                       2m7s
: qhub-jupyterhub-proxy-api      ClusterIP   10.106.105.226   <none>        8001/TCP                                       2m7s
: qhub-jupyterhub-proxy-public   NodePort    10.105.123.23    <none>        80:31279/TCP                                   2m7s
: qhub-traefik                   NodePort    10.96.89.153     <none>        8000:32072/TCP,8786:32679/TCP,9000:31824/TCP   2m7s

Check that the namespace now exists

#+begin_src shell :results output :dir kubernetes
  kubectl get namespace -A
#+end_src

#+RESULTS:
: NAME              STATUS   AGE
: default           Active   5m56s
: dev               Active   2m9s
: kube-node-lease   Active   5m57s
: kube-public       Active   5m57s
: kube-system       Active   5m57s

Check that config files exist

#+begin_src shell :results output :dir kubernetes
  kubectl get deployments -n dev
#+end_src

#+RESULTS:
: NAME                          READY   UP-TO-DATE   AVAILABLE   AGE
: qhub-conda-store              1/1     1            1           2m20s
: qhub-daskgateway-controller   1/1     1            1           25s
: qhub-daskgateway-gateway      1/1     1            1           112s
: qhub-jupyterhub-hub           1/1     1            1           2m20s
: qhub-jupyterhub-proxy         1/1     1            1           2m20s
: qhub-traefik                  1/1     1            1           2m20s

#+begin_src shell :results output :dir kubernetes/deployment
  kubectl version
#+end_src

#+RESULTS:
: Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.5", GitCommit:"e0fccafd69541e3750d460ba0f9743b90336f24f", GitTreeState:"archive", BuildDate:"1970-01-01T00:00:01Z", GoVersion:"go1.13.8", Compiler:"gc", Platform:"linux/amd64"}
: Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.11", GitCommit:"ea5f00d93211b7c80247bf607cfa422ad6fb5347", GitTreeState:"clean", BuildDate:"2020-08-13T15:11:47Z", GoVersion:"go1.13.15", Compiler:"gc", Platform:"linux/amd64"}

#+begin_src shell :results none :dir kubernetes/deployment
  terraform destroy -auto-approve
#+end_src

* Motivation

Looking at
 - https://github.com/dask/dask-gateway/blob/master/resources/helm/
 - https://github.com/jupyterhub/zero-to-jupyterhub-k8s/tree/master/jupyterhub

They both make critical assumptions and try to be more beginner friendly
