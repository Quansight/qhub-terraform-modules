* Using minikube for testing

Delete previous minikube

#+begin_src shell :results output
  minikube delete
#+end_src

#+RESULTS:
: * Removing /home/costrouc/.minikube/machines/minikube ...
: * Removed all traces of the "minikube" cluster.

Start

#+begin_src shell :results output
  minikube start --kubernetes-version=v1.17.11 --vm-driver=kvm2
#+end_src

#+RESULTS:

#+begin_src shell :results output
  minikube status
#+end_src

#+RESULTS:
: host: Running
: kubelet: Running
: apiserver: Running
: kubectl: Correctly Configured: pointing to minikube-vm at 192.168.39.123

Get kubernetes context

#+begin_src shell :results output
  kubectl config current-context
#+end_src

#+RESULTS:
: minikube

#+begin_src shell
  kubectl get nodes
#+end_src

#+RESULTS:
| NAME     | STATUS | ROLES  | AGE | VERSION  |
| minikube | Ready  | master | 15h | v1.17.11 |

#+begin_src shell :results output
  kubectl get namespaces -A
#+end_src

#+RESULTS:
: NAME              STATUS   AGE
: default           Active   96s
: kube-node-lease   Active   97s
: kube-public       Active   97s
: kube-system       Active   97s

** Terraform Deployment

Initialize Terraform

#+begin_src shell :results none :dir kubernetes/deployment
  rm -rf .terraform

  mkdir -p .terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.1.0/linux_amd64/
  mkdir -p .terraform/plugins/registry.terraform.io/-/kubernetes-alpha/0.1.0/linux_amd64/

  pushd .terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.1.0/linux_amd64/
  wget https://github.com/hashicorp/terraform-provider-kubernetes-alpha/releases/download/v0.1.0/terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip
  unzip terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip
  popd

  pushd .terraform/plugins/registry.terraform.io/-/kubernetes-alpha/0.1.0/linux_amd64/
  wget https://github.com/hashicorp/terraform-provider-kubernetes-alpha/releases/download/v0.1.0/terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip
  unzip terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip
  popd
#+end_src

#+begin_src shell :results output :dir kubernetes/deployment/
  tree .terraform/plugins/
#+end_src

#+RESULTS:
#+begin_example
.terraform/plugins/
└── registry.terraform.io
    ├── -
    │   └── kubernetes-alpha
    │       └── 0.1.0
    │           └── linux_amd64
    │               ├── terraform-provider-kubernetes-alpha
    │               └── terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip
    └── hashicorp
        └── kubernetes-alpha
            └── 0.1.0
                └── linux_amd64
                    ├── terraform-provider-kubernetes-alpha
                    └── terraform-provider-kubernetes-alpha_0.1.0_linux_amd64.zip

9 directories, 4 files
#+end_example

#+begin_src shell :results none :dir kubernetes/deployment
  terraform init
#+end_src

Terraform plan

#+begin_src shell :results none :dir kubernetes/deployment
  terraform plan
#+end_src

Terraform apply

#+begin_src shell :results none :dir kubernetes/deployment
  terraform apply -auto-approve
#+end_src

Check that services are available

#+begin_src shell :results output :dir kubernetes/deployment
  kubectl get services -n dev
#+end_src

#+RESULTS:
: NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                        AGE
: qhub-conda-store   ClusterIP   10.105.255.178   <none>        2049/TCP,20048/TCP,111/TCP                     4m35s
: qhub-traefik       NodePort    10.107.164.226   <none>        8000:32239/TCP,8786:32231/TCP,9000:31820/TCP   4m35s

Check that the namespace now exists

#+begin_src shell :results output :dir kubernetes
  kubectl get namespace -A
#+end_src

#+RESULTS:
: NAME              STATUS   AGE
: default           Active   6m31s
: dev               Active   4m9s
: kube-node-lease   Active   6m32s
: kube-public       Active   6m32s
: kube-system       Active   6m32s

Check that config files exist

#+begin_src shell :results output :dir kubernetes
  kubectl get deployments -n dev
#+end_src

#+RESULTS:

#+begin_src shell :results output :dir kubernetes/deployment
  kubectl delete clusterrole qhub-traefik
  kubectl delete clusterrolebinding qhub-traefik
#+end_src

#+RESULTS:
: clusterrole.rbac.authorization.k8s.io "qhub-traefik" deleted
: clusterrolebinding.rbac.authorization.k8s.io "qhub-traefik" deleted

#+begin_src shell :results output :dir kubernetes/deployment
  kubectl version
#+end_src

#+RESULTS:
: Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.5", GitCommit:"e0fccafd69541e3750d460ba0f9743b90336f24f", GitTreeState:"archive", BuildDate:"1970-01-01T00:00:01Z", GoVersion:"go1.13.8", Compiler:"gc", Platform:"linux/amd64"}
: Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2019-12-07T21:12:17Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"linux/amd64"}

#+begin_src shell :results none :dir kubernetes/deployment
  terraform destroy -auto-approve
#+end_src

There is a value.yaml file that is also stored in the configuration

#+begin_src yaml
auth:
  github:
    clientSecret: 321e5a2ff3e5362ea7e0cbb0fccbdaacbbb6b3bb
hub:
  services:
    dask-gateway:
      apiToken: jNdg9NTJ4z3ZrZrBP2nlGSNSZcWNVlEE
#+end_src

* Motivation

Looking at
 - https://github.com/dask/dask-gateway/blob/master/resources/helm/
 - https://github.com/jupyterhub/zero-to-jupyterhub-k8s/tree/master/jupyterhub

They both make critical assumptions and try to be more beginner friendly
