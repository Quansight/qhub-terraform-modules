* Using minikube for testing

Start

#+begin_src shell :results output
  minikube start --vm-driver kvm2
#+end_src

#+RESULTS:
: * minikube v1.2.0 on linux (amd64)
: * Creating kvm2 VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...
: * Configuring environment for Kubernetes v1.15.0 on Docker 18.09.6
: * Pulling images ...
: * Launching Kubernetes ...
: * Verifying: apiserver proxy etcd scheduler controller dns
: * Done! kubectl is now configured to use "minikube"

#+begin_src shell :results output
  minikube status
#+end_src

#+RESULTS:
: host: Running
: kubelet: Running
: apiserver: Running
: kubectl: Correctly Configured: pointing to minikube-vm at 192.168.39.67

Get kubernetes context

#+begin_src shell :results output
  kubectl config current-context
#+end_src

#+RESULTS:
: minikube

#+begin_src shell
  kubectl get nodes
#+end_src

#+RESULTS:
| NAME     | STATUS | ROLES  | AGE   | VERSION |
| minikube | Ready  | master | 3h41m | v1.15.0 |

#+begin_src shell :results output
  kubectl get namespaces -A
#+end_src

#+RESULTS:
: NAME              STATUS   AGE
: default           Active   3h46m
: kube-node-lease   Active   3h46m
: kube-public       Active   3h46m
: kube-system       Active   3h46m

** Terraform Deployment

Initialize Terraform

#+begin_src shell :results output :dir kubernetes
  terraform init
#+end_src

#+RESULTS:
#+begin_example

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Checking for available provider plugins...
- Downloading plugin for provider "kubernetes" (hashicorp/kubernetes) 1.12.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

,* provider.kubernetes: version = "~> 1.12"

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
#+end_example

Terraform plan

#+begin_src shell :results output :dir kubernetes
  terraform plan
#+end_src

#+RESULTS:
#+begin_example
[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # kubernetes_namespace.example[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "kubernetes_namespace" "example" {
      [32m+[0m [0m[1m[0mid[0m[0m = (known after apply)

      [32m+[0m [0mmetadata {
          [32m+[0m [0m[1m[0mannotations[0m[0m      = {
              [32m+[0m [0m"name" = "example-namespace"
            }
          [32m+[0m [0m[1m[0mgeneration[0m[0m       = (known after apply)
          [32m+[0m [0m[1m[0mlabels[0m[0m           = {
              [32m+[0m [0m"mylabel" = "label-value"
            }
          [32m+[0m [0m[1m[0mname[0m[0m             = "example"
          [32m+[0m [0m[1m[0mresource_version[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mself_link[0m[0m        = (known after apply)
          [32m+[0m [0m[1m[0muid[0m[0m              = (known after apply)
        }
    }

[0m[1mPlan:[0m 1 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

#+end_example

Terraform apply

#+begin_src shell :results output :dir kubernetes
  terraform apply -auto-approve
#+end_src

#+RESULTS:
: [0m[1mkubernetes_namespace.example: Creating...[0m[0m
: [0m[1mkubernetes_namespace.example: Creation complete after 0s [id=example][0m[0m
: [0m[1m[32m
: Apply complete! Resources: 1 added, 0 changed, 0 destroyed.[0m

Check that the namespace now exists

#+begin_src shell :results output :dir kubernetes
#+end_src
